
-- Zmienna globalna (znak @ przed nazwą zmiennej) :
SET @RENTSQTY = 0;


-- Przykład prostego wyzwalacza pokazano poniżej :
DELIMITER $$
CREATE TRIGGER RENTSCOUNTER BEFORE INSERT ON RENTS
FOR EACH ROW
BEGIN
	SET @RENTSQTY = @RENTSQTY + 1;
END $$
DELIMITER ;


-- Sprawdź jaka jest aktualna wartość zmiennej @RENTSQTY :
SELECT @RENTSQTY;


-- Dodaj teraz przykładowe rekordy do tabeli wypożyczeń :
INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
     VALUES (1, 3, CURDATE() - 5, null);
INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
     VALUES (2, 3, CURDATE() - 2, null);
INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
     VALUES (3, 1, CURDATE() - 9, null);
INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
     VALUES (2, 4, CURDATE() - 3, null);
COMMIT;


-- Na zakończenie usuniemy utworzony "ćwiczeniowy" wyzwalacz, ponieważ nie będzie już nam później potrzebny :
DROP TRIGGER RENTSCOUNTER;


-- Stworzymy teraz taką tabelę audytową dla tabeli RENTS :
CREATE TABLE RENTS_AUD (
	EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
    EVENT_DATE DATETIME NOT NULL,
    EVENT_TYPE VARCHAR (10) DEFAULT NULL,
    RENT_ID INT(11) NOT NULL,
    OLD_BOOK_ID INT(11),
    NEW_BOOK_ID INT(11),
    OLD_READER_ID INT(11),
    NEW_READER_ID INT(11),
    OLD_RENT_DATE DATETIME,
    NEW_RENT_DATE DATETIME,
    OLD_RETURN_DATE DATETIME,
    NEW_RETURN_DATE DATETIME,
    PRIMARY KEY (`EVENT_ID`)
);

-- Logowanie zdarzenia związanego z wstawianiem danych do tabeli RENTS :
DELIMITER $$
CREATE TRIGGER RENTS_INSERT AFTER INSERT ON RENTS
FOR EACH ROW
BEGIN
	INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, NEW_BOOK_ID, NEW_READER_ID, NEW_RENT_DATE, NEW_RETURN_DATE)
		VALUES (CURTIME(), "INSERT", NEW.RENT_ID, NEW.BOOK_ID, NEW.READER_ID, NEW.RENT_DATE, NEW.RETURN_DATE);
END $$
DELIMITER ;


-- Wykonaj teraz przykładową operację wstawienia rekordu do tabeli RENTS :
INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
     VALUES (2, 4, CURDATE() - 1, null);
COMMIT;


-- Przygotujmy teraz wyzwalacz logujący informacje o operacjach usunięcia rekordów z tabeli RENTS :
DELIMITER $$     
CREATE TRIGGER RENTS_DELETE AFTER DELETE ON RENTS
FOR EACH ROW
BEGIN
	INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID)
		VALUES (CURTIME(), "DELETE", OLD.RENT_ID);
END $$
DELIMITER ;



-- Wykonaj teraz przykładową operację usunięcia danych z tabeli RENTS :
DELETE FROM RENTS WHERE RENT_ID = 24;


-- Wyzwalacz po operacji aktualizacji danych :
DELIMITER $$
CREATE TRIGGER RENTS_UPDATE AFTER UPDATE ON RENTS
FOR EACH ROW
BEGIN
	INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, 
		NEW_BOOK_ID, NEW_READER_ID, NEW_RENT_DATE, NEW_RETURN_DATE, 
        OLD_BOOK_ID, OLD_READER_ID, OLD_RENT_DATE, OLD_RETURN_DATE)
		VALUES (CURTIME(), "UPDATE", OLD.RENT_ID, 
        NEW.BOOK_ID, NEW.READER_ID, NEW.RENT_DATE, NEW.RETURN_DATE, 
        OLD.BOOK_ID, OLD_READER_ID, OLD.RENT_DATE, OLD.RETURN_DATE);
END $$
DELIMITER ;


-- Wykonaj teraz przykładową modyfikację danych w tabeli RENTS :
UPDATE RENTS SET RETURN_DATE = CURDATE() 
	WHERE RENT_ID = 20; 
COMMIT;